- name: Workstation Setup
  hosts: all
  gather_facts: false
  become: true
  become_user: root

  vars_files:
    - variables.yml
    - variables_mac_defaults.yml

  tasks:
    - name: Install python3 for Ansible (Debian/Ubuntu)
      ansible.builtin.raw: |
        if [ "$(grep 'debian\|ubuntu' /etc/os-release)" != "" -a ! "test -e /usr/bin/python3" ]; then
          apt -qqy update;
          apt install -qqy python3 python3-setuptools python3-pip;
        fi
      register: output
      changed_when: output.rc != 0

    - name: Install python3 for Ansible (Fedora/RHEL/CentOS)
      ansible.builtin.raw: |
        if [ "$(grep 'fedora\|centos' /etc/os-release)" != "" -a ! "test -e /usr/bin/python3" ]; then
          dnf install -y python3;
        fi
      register: output
      changed_when: output.rc != 0

    - name: Install python3 for Ansible (Alpine)
      ansible.builtin.raw: |
        if [ "$(grep alpine /etc/os-release)" != "" -a ! "test -e /usr/bin/python3" ]; then
          apk update;
          apk upgrade;
          apk add python3 py3-setuptools;
        fi
      register: output
      changed_when: output.rc != 0

    - name: Install Homebrew (MacOS)
      ansible.builtin.raw: |
        if [ "$(uname)" == "Darwin" -a ! "test -e /usr/local/bin/brew" ]; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
      register: output
      changed_when: output.rc != 0

    - name: Install python3 for Ansible (MacOS)
      ansible.builtin.raw: |
        if [ "$(uname)" == "Darwin" -a ! "test -e $(which python3)" ]; then
          brew install python3;
        fi
      register: output
      changed_when: output.rc != 0

    - name: Gathering Facts
      ansible.builtin.setup:

    - name: Include Detect OS and User tasks
      ansible.builtin.include_tasks: detect_os_user.yml

    - name: Install Developer Tools (MacOS)
      ansible.builtin.command: xcode-select --install
      when: is_macos
      register: xcode_output_install
      failed_when: xcode_output_install.rc != 0 and xcode_output_install.rc != 1
      changed_when: "'command line tools are already installed' not in xcode_output_install.stderr"
      become: true
      become_user: "{{ ansible_user_id }}"

    - name: Create a "wheel" and "ssh" group for sudoers
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      with_items:
        - wheel
        - ssh
      when: is_linux

    - name: Allow "wheel" group to have passwordless sudo
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%wheel"
        line: "%wheel ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"
      when: is_linux

    - name: Create user and add to sudoers
      ansible.builtin.user:
        name: "{{ new_user }}"
        groups: "wheel, ssh"
        shell: /bin/bash
        append: true
        state: present
        createhome: true
      when: is_linux

    - name: Setup authorized SSH keys for user
      ansible.posix.authorized_key: # noqa: ansible-lintjinja[spacing]
        user: "{{ new_user }}"
        key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub', errors='ignore') }}"
      when: ansible_host != "localhost"

    - name: Set MacOS defaults
      community.general.osx_defaults:
        domain: "{{ item.domain }}"
        key: "{{ item.key }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
        state: "{{ item.state | default('present') }}"
      with_items: "{{ macos_defaults }}"
      when: is_macos

    - name: Does NX GZip accelerator exists (POWER)
      ansible.builtin.stat:
        path: /dev/crypto/nx-gzip
      register: nx_gzip_exists
      when: ansible_architecture == "ppc64le"

    - name: Create udev rule for NX permission (POWER)
      ansible.builtin.copy:
        dest: "/etc/udev/rules.d/99-nx-gzip.rules"
        content: |
          # /etc/udev/rules.d/99-nx-gzip.rules
          # Allow access to NX accelerator to any user
          KERNEL=="nx-gzip", MODE="0666"
        mode: "0644"
      when: ansible_architecture == "ppc64le" and  nx_gzip_exists.stat.exists

- name: Setup Shell
  ansible.builtin.import_playbook: setup_shell.yml

- name: Setup Shell Links
  ansible.builtin.import_playbook: setup_links.yml

- name: Setup Apps and Development Tools
  ansible.builtin.import_playbook: setup_apps.yml
