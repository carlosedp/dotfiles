- name: Setup Apps and Development Tools
  hosts: localhost
  connection: local

  tasks:
    - name: Set a variable if the OS is Linux or MacOS
      ansible.builtin.set_fact:
        is_linux: "{{ ansible_os_family == 'Debian' or ansible_os_family == 'RedHat' or ansible_os_family == 'Alpine' }}"
        is_macos: "{{ ansible_os_family == 'Darwin' }}"

    - name: Get all packed fonts
      ansible.builtin.find:
        paths: "$HOME/.dotfiles/fonts"
        file_type: file
        recurse: true
        patterns: "*.tar.gz"
      register: font_files

    - name: Unpack font tarballs (MacOS)
      ansible.builtin.unarchive:
        src: "{{ item.path }}"
        dest: "/Library/Fonts"
        remote_src: true
      with_items: "{{ font_files.files }}"
      when: is_macos
      become: true

    - name: Unpack font tarballs (Linux)
      ansible.builtin.unarchive:
        src: "{{ font_files.files }}"
        dest: "/usr/share/fonts"
        remote_src: true
      when: is_linux
      become: true

    - name: Update Homebrew (MacOS)
      community.general.homebrew:
        update_homebrew: true
        upgrade_all: true
        state: latest
      when: is_macos
      # tags: skip

    - name: Install Homebrew App Bundle (MacOS)
      ansible.builtin.command:
        cmd: brew bundle install --file="$HOME/.dotfiles/mac/Brewfile"
      when: is_macos
      register: brew_bundle
      changed_when: brew_bundle.rc != 0
      # tags: skip

    - name: Install Homebrew Cask Bundle (MacOS)
      ansible.builtin.command:
        cmd: brew bundle install --file="$HOME/.dotfiles/mac/Brewfile-casks-store"
      when: is_macos
      register: brew_cask_bundle
      changed_when: brew_cask_bundle.rc != 0
      # tags: skip

    - name: Install Homebrew Development Bundle (MacOS)
      ansible.builtin.command:
        cmd: brew bundle install --file="$HOME/.dotfiles/mac/Brewfile-development"
      when: is_macos
      register: brew_development_bundle
      changed_when: brew_development_bundle.rc != 0
      # tags: skip

    - name: Install Linux Packages (Base)
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - sudo
        - curl
        - wget
        - git
        - unzip
        - file
        - dbus
        - bc
        - bash-completion
        - hdparm
        - sysstat
        - less
        - vim
        - iptables
        - ipset
        - pciutils
        - iperf3
        - net-tools
        - jq
        - haveged
        - htop
        - zsh
        - tmux
        - neofetch
        - lshw
        - iotop
        - rsync
        - tree
        - autojump
        - lm-sensors
        - nodejs
        - npm
      when: is_linux

    - name: Install Linux Packages (Debian)
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - openssh-client
        - openssh-server
        - locales
        - ack-grep
        - nfs-common
        - apt-utils
        - build-essential
        - lsb-release
        - telnet
        - xz-utils
        - apt-rdepends
      when: is_linux and ansible_os_family == 'Debian'

    - name: Install Linux Packages (RedHat)
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - openssh-client
        - openssh-server
        - ack
        - nfs-utils
        - "@development-tools"
        - which
        - lsb-release
        - telnet
        - xz
      when: is_linux and ansible_os_family == 'RedHat'

    - name: Install Linux Packages (Alpine)
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - openssh-client
        - openssh-server
        - ack
        - nfs-utils
        - build-base
        - xz
      when: is_linux and ansible_os_family == 'Alpine'

    - name: Check if Golang is installed (Linux)
      ansible.builtin.stat:
        path: /usr/local/go/bin/go
      register: go_installed
      when: is_linux

    - name: Check current Go version (Linux)
      ansible.builtin.command:
        cmd: /usr/local/go/bin/go version
      register: go_version
      when: is_linux and go_installed.stat.exists
      changed_when: go_version.rc != 0

    - name: Get latest Golang version (Linux)
      ansible.builtin.shell: | # noqa: command-instead-of-module
        set -o pipefail
        curl -sSLf https://golang.org/VERSION\?m\=text | head -1
      register: go_latest
      when: is_linux
      changed_when: go_latest.rc != 0

    - name: Install latest Golang if outdated (Linux)
      ansible.builtin.shell: |
        set -o pipefail
        declare -A ARCH=([x86_64]=amd64 [aarch64]=arm64 [armv7l]=arm [ppc64le]=ppc64le [s390x]=s390x)
        GOVERSION=$(curl -sSLf https://golang.org/VERSION\?m\=text | head -1)
        rm -rf /usr/local/go
        curl -sSLf https://golang.org/dl/$GOVERSION.${ARCH[$(uname -m)]}.tar.gz | tar -C /usr/local -xzf -
      when: is_linux and (go_version != go_latest or not go_installed.stat.exists)
      register: go_install
      changed_when: go_install.rc != 0

    - name: Install Golang Apps
      ansible.builtin.command:
        cmd: go install "{{ item }}"
      loop:
        - "github.com/github/hub/v2@master"
        - "rsc.io/2fa@latest"
        - "golang.org/x/tools/cmd/benchcmp@latest"
        - "github.com/traefik/yaegi/cmd/yaegi@latest"
        - "github.com/rakyll/hey@latest"
        - "github.com/junegunn/fzf@latest"
        - "github.com/brancz/gojsontoyaml@master"
        - "mvdan.cc/sh/v3/cmd/shfmt@latest"
        - "github.com/hhatto/gocloc/cmd/gocloc@latest"
        - "github.com/charmbracelet/glow@latest"
      register: go_apps
      changed_when: go_apps.rc != 0

    - name: Install Rust (Linux)
      ansible.builtin.command: # noqa: command-instead-of-module
        cmd: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
      when: is_linux
      register: rust_installed
      changed_when: rust_installed.rc != 0

    - name: Install Rust Apps via Cargo
      ansible.builtin.command:
        cmd: cargo install "{{ item }}"
      loop:
        - "eza"
        - "bat"
        - "git-delta"
        - "hyperfine"
        - "ripgrep"
        - "fd-find"
      register: rust_apps
      when: is_linux
      changed_when: rust_apps.rc != 0

    - name: Install Python Apps
      ansible.builtin.command:
        cmd: pip3 install "{{ item }}"
      loop:
        - "ansible-lint"
      register: python_apps
      changed_when: python_apps.rc != 0

    - name: Install Kubernetes CLI (kubectl)
      ansible.builtin.shell: |
        set -o pipefail
        declare -A ARCH=([x86_64]=amd64 [aarch64]=arm64 [armv7l]=arm [ppc64le]=ppc64le [s390x]=s390x)
        KUBECTLVERSION=$(curl -sSLf https://dl.k8s.io/release/stable.txt)
        curl -sSLf https://dl.k8s.io/release/$KUBECTLVERSION/bin/linux/${ARCH[$(uname -m)]}/kubectl -o /usr/local/bin/kubectl
        chmod +x /usr/local/bin/kubectl
      when: is_linux
      register: kubectl_install
      changed_when: kubectl_install.rc != 0

    - name: Install Kubectl plugin manager (krew)
      ansible.builtin.shell: |
        set -o pipefail
        declare -A ARCH=([x86_64]=amd64 [aarch64]=arm64 [armv7l]=arm [ppc64le]=ppc64le [s390x]=s390x)
        OS="$(uname | tr '[:upper:]' '[:lower:]')"
        curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-${OS}_${ARCH[$(uname -m)]}.tar.gz" | tar xvz - -C /tmp
        chmod +x /tmp/krew
        /tmp/krew install krew
      when: is_linux
      register: krew_install
      changed_when: krew_install.rc != 0

    - name: Install Kubectl plugins
      ansible.builtin.command:
        cmd: /usr/local/bin/kubectl krew install "{{ item }}"
      loop:
        - "ctx"
        - "ns"
        - "restart"
        - "access-matrix"
      when: is_linux
      register: kubectl_plugins
      changed_when: kubectl_plugins.rc != 0

    - name: Install cpanminus to manage Perl modules
      ansible.builtin.shell: | # noqa: command-instead-of-module
        set -o pipefail
        curl -fsSL https://cpanmin.us | perl - --sudo App::cpanminus
      when: is_macos
      register: cpanminus_install
      changed_when: cpanminus_install.rc != 0
      become: true

    - name: Install CPAN Switch module for GTKWave (MacOS)
      community.general.cpanm:
        name: Switch
      when: is_macos

    - name: Erlang LS diretory (MacOS)
      ansible.builtin.file:
        path: "$HOME/Library/Application Support/erlang_ls"
        state: directory
        mode: "0755"
      when: is_macos

    - name: Erlang LS directory (Linux)
      ansible.builtin.file:
        path: "$HOME/.config"
        state: directory
        mode: "0755"
      when: is_linux

    - name: Link Erlang LS Config (MacOS)
      ansible.builtin.file:
        src: "$HOME/.dotfiles/rc/config/erlang_ls/erlang_ls.config"
        dest: "$HOME/Library/Application Support/erlang_ls/erlang-ls.config"
        state: link
      when: is_macos

    - name: Link Erlang LS Config (Linux)
      ansible.builtin.file:
        src: "$HOME/.dotfiles/rc/config/erlang_ls/erlang_ls.config"
        dest: "$HOME/.config/erlang-ls.config"
        state: link
      when: is_linux

    - name: Get latest Coursier AMD64 version
      ansible.builtin.shell: |
        set -o pipefail
        curl -sSLf https://api.github.com/repos/coursier/coursier/releases/latest |grep tag_name | cut -d '"' -f 4
      when: is_linux
      register: coursier_amd64
      changed_when: coursier_amd64.rc != 0

    - name: Install Java/Scala Coursier (Linux - AMD64)
      ansible.builtin.shell: |
        set -o pipefail
        curl -sSLf https://github.com/coursier/coursier/releases/download/{{ coursier_amd64 }}/cs-x86_64-pc-linux.gz | gunzip -c > /tmp/cs
        chmod +x /tmp/cs
        /tmp/cs install cs
      when: is_linux
      register: coursier_install_amd64
      changed_when: coursier_install_amd64.rc != 0

    - name: Get latest Coursier AARCH64 version
      ansible.builtin.shell: |
        set -o pipefail
        curl -sSLf https://api.github.com/repos/VirtusLab/coursier-m1/releases/latest |grep tag_name | cut -d '"' -f 4
      when: is_linux
      register: coursier_aaarch64
      changed_when: coursier_aaarch64.rc != 0

    - name: Install Java/Scala Coursier (Linux - AARCH64)
      ansible.builtin.shell: |
        set -o pipefail
        curl -sSLf https://github.com/VirtusLab/coursier-m1/releases/download/{{ coursier_aaarch64.stdout }}/cs-aarch64-pc-linux.gz | gunzip -c > /tmp/cs
        chmod +x /tmp/cs
        /tmp/cs install cs
      when: is_linux
      register: coursier_install_aaarch64
      changed_when: coursier_install_aaarch64.rc != 0

    - name: Get JDK version from scala.sh
      ansible.builtin.shell: |
        set -o pipefail
        cat $HOME/.dotfiles/shellconfig/scala.sh|grep "export JVM_VERSION" | head -1 | cut -d"=" -f2
      register: jdk_version
      changed_when: jdk_version.rc != 0

    - name: Install JDK using Coursier
      ansible.builtin.command:
        cmd: cs install --jvm "{{ jdk_version.stdout }}"
      register: coursier_jdk
      changed_when: coursier_jdk.rc != 0

    - name: Add Coursier channels
      ansible.builtin.command:
        cmd: cs channel -a "{{ item }}"
      loop:
        - https://raw.githubusercontent.com/oyvindberg/bleep/master/coursier-channel.json
      register: coursier_channels
      changed_when: coursier_channels.rc != 0

    - name: Install Scala Coursier apps
      ansible.builtin.command:
        cmd: cs install "{{ item }}"
      loop:
        - cs
        - giter8
        - bloop-jvm
        - sbt
        - scala
        - scalac
        - scalafmt
        - scalafix
        - scala-cli
        - bleep
      register: coursier_apps
      changed_when: coursier_apps.rc != 0
