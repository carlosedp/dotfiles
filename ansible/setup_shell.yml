- name: ZSH setup
  hosts: all
  become_user: root
  become: false

  vars_files:
    - variables.yml
    - packages_apps.yml

  tasks:
    - name: Include Detect OS and User tasks
      ansible.builtin.include_tasks: detect_os_user.yml

    - name: Install basic packages on Linux
      ansible.builtin.package:
        name:
          - zsh
          - bash
          - git
          - curl
          - wget
        state: present
      when: is_linux
      become: true

    - name: Install basic packages on MacOS using Homebrew
      community.general.homebrew:
        name:
          - zsh
          - git
          - curl
          - wget
        state: present
        update_homebrew: true
      when: is_macos

    - name: Detect where Zsh is installed
      ansible.builtin.shell: which zsh # noqa: command-instead-of-shell
      register: zsh_path
      changed_when: false

    - name: Change default shell to zsh
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: "{{ zsh_path.stdout }}"
      become: true

    - name: Block of tasks to be run for the user
      become: true
      become_user: "{{ ansible_user_id }}"
      block:
        - name: Pull the dotfiles repository or update it
          ansible.builtin.git: # noqa: latest[git]
            repo: https://github.com/carlosedp/dotfiles.git
            dest: $HOME/.dotfiles
            update: true

        - name: Check if vimrc exists
          ansible.builtin.stat:
            path: $HOME/.dotfiles/rc/vimrc
          register: vimrc

        - name: Check if oh-my-zsh is installed
          ansible.builtin.stat:
            path: $HOME/.oh-my-zsh
          register: ohmyzsh_installed

        - name: Update oh-my-zsh as it is already installed
          ansible.builtin.command: # noqa: latest[git]
            cmd: $HOME/.oh-my-zsh/tools/upgrade.sh -v minimal
            chdir: $HOME/.oh-my-zsh
          register: omz_updated
          changed_when: omz_updated.stdout.find('already at the latest version.') == -1
          when: ohmyzsh_installed.stat.exists

        - name: Install oh-my-zsh
          ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && exit 0
          args:
            creates: $HOME/.oh-my-zsh
          when: not ohmyzsh_installed.stat.exists

        - name: Install Zsh Themes
          ansible.builtin.git: # noqa: latest[git]
            repo: "{{ item }}"
            dest: $HOME/.oh-my-zsh/custom/themes/{{ item | basename | regex_replace('\\.git$', '') }}
            update: true
            force: true
          loop: "{{ zsh_themes }}"
          when: ohmyzsh_installed.stat.exists

        - name: Install Zsh Plugins
          ansible.builtin.git: # noqa: latest[git]
            repo: "{{ item }}"
            dest: $HOME/.oh-my-zsh/custom/plugins/{{ item | basename | regex_replace('\\.git$', '') }}
            update: true
            force: true
          loop: "{{ zsh_plugins }}"
          when: ohmyzsh_installed.stat.exists

        - name: Get all installed oh-my-zsh plugins
          ansible.builtin.find:
            paths: $HOME/.oh-my-zsh/custom/plugins
            patterns: '*'
            file_type: directory
          register: zsh_plugins_found
          when: ohmyzsh_installed.stat.exists

        - name: Remove oh-my-zsh plugins not on the list
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ zsh_plugins_found.files }}"
          when: ohmyzsh_installed.stat.exists and (item.path | basename not in zsh_plugins | map('basename') | list and item.path | basename not in ['example'])

        - name: Clean Zsh completion cache
          ansible.builtin.file:
            path: $HOME/.zcompdump*
            state: absent

        - name: Install fzf repository
          ansible.builtin.git: # noqa: latest[git]
            repo: https://github.com/junegunn/fzf
            dest: $HOME/.fzf
            update: true

        - name: Install fzf
          ansible.builtin.shell: $HOME/.fzf/install --all --no-update-rc --no-bash --no-fish --no-zsh
          args:
            creates: $HOME/.fzf

        - name: Setup TMUX Plugin
          ansible.builtin.git: # noqa: latest[git]
            repo: https://github.com/tmux-plugins/tpm
            dest: $HOME/.tmux/plugins/tpm
            update: true
      # End of block with user tasks

    - name: Link user vimrc to root so sudo has same configs
      ansible.builtin.file:
        src: /home/"{{ ansible_user_id }}"/.dotfiles/rc/vimrc
        dest: /root/.vimrc
        state: link
        force: true
      become: true
      when: vimrc.stat.exists and is_linux

    - name: Fix completion permissions
      ansible.builtin.file:
        path: /usr/local/share
        mode: "0755"
        recurse: true
      become: true
